name: Build & deploy

on: [ push ]

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/ia-tjenester-metrikker:${{ github.sha }}

concurrency:
  group: deploy-on-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '13.x'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run tests
        run: ./gradlew test --info

  deploy-to-dev:
    name: Deploy to dev-gcp
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/oppgrader-log4j-api'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '13.x'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build jar with Gradle
        run: ./gradlew clean build
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build --tag ${IMAGE} .
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          docker push ${IMAGE}
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          VAR: image=${{ env.IMAGE }}
          RESOURCE: nais/nais-dev-gcp.yaml,nais/topic.yaml
          VARS: nais/nais-dev-gcp.json

  deploy-to-prod-gcp:
    name: Deploy to prod-gcp
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '13.x'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build jar with Gradle
        run: ./gradlew clean build
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build --tag ${IMAGE} .
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          docker push ${IMAGE}
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          VAR: image=${{ env.IMAGE }}
          RESOURCE: nais/nais-prod-gcp.yaml
          VARS: nais/nais-prod-gcp.json

  deploy-to-labs-gcp:
    name: Deploy to labs-gcp
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/legge_til_Correlation-ID'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '13.x'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build jar with Gradle
        run: ./gradlew clean build
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build --tag ${IMAGE} .
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          docker push ${IMAGE}
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: labs-gcp
          VAR: image=${{ env.IMAGE }}
          RESOURCE: nais/nais-labs-gcp.yaml,nais/topic.yaml
          VARS: nais/nais-labs-gcp.json
